org: saularanda
app: test-serverless
service: test-serverless
frameworkVersion: "3"
provider:
  name: aws
  runtime: nodejs14.x
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:us-west-2:335946760084:table/Notes
plugins:
  - serverless-openapi-documentation
  - serverless-aws-documentation
  - serverless-jest-plugin

custom:
  documentation:
    version: "1"
    title: "Documentación reto serverless"
    description: "Esta es la documentación de los servicios"
    models:
      - name: Character
        description: "Es el detalle del personaje"
        contentType: "application/json"
        schema:
          type: object
          properties:
            nombre:
              type: string
            altura:
              type: string
            masa:
              type: string
            color_pelo:
              type: string
            color_piel:
              type: string
            color_ojos:
              type: string
            año_nacimiento:
              type: string
            genero:
              type: string
            mundo_natal:
              type: string
            peliculas:
              type: string
            especies:
              type: string
            vehiculos:
              type: string
            naves:
              type: string
            creado:
              type: string
            editado:
              type: string
            url:
              type: string
      - name: Film
        description: "Es el detalle de la pelicula de star wars"
        contentType: "application/json"
        schema:
          type: object
          properties:
            titulo:
              type: string
            episodio_id:
              type: string
            texto_apertura:
              type: string
            director:
              type: string
            productor:
              type: string
            fecha_lanzamiento:
              type: string
            personajes:
              type: string
            planetas:
              type: string
            naves:
              type: string
            vehiculos:
              type: string
            especies:
              type: string
            creado:
              type: string
            editado:
              type: string
            url:
      - name: Note
        contentType: "application/json"
        schema:
          type: object
          properties:
            title:
              type: string
            description:
              type: string
            complete:
              type: boolean
      - name: NoteResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            id:
              type: string
            title:
              type: string
            description:
              type: string
            complete:
              type: boolean
            createdAt:
              type: string
      - name: SuccessResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: number
            mensaje:
              type: string
      - name: ErrorResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: number
            mensaje:
              type: string

functions:
  getPeople:
    handler: src/swapi.getPeople
    events:
      - http:
          path: "personaje/{id}"
          method: "get"
          documentation:
            summary: "Obtener personaje"
            description: "Obtiene un personaje de star wars por id"
            pathParams:
              - name: "id"
                description: "Id del personaje de star wars"
                schema:
                  type: "number"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Obtenemos al personaje de star wars"
                responseModels:
                  "application/json": "Character"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorResponse"
  getFilm:
    handler: src/swapi.getFilm
    events:
      - http:
          path: "pelicula/{id}"
          method: "get"
          documentation:
            summary: "Obtener pelicula"
            description: "Obtiene una pelicula de star wars por id"
            pathParams:
              - name: "id"
                description: "Id de la pelicula de star wars"
                schema:
                  type: "number"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Obtenemos la pelicula de star wars"
                responseModels:
                  "application/json": "Film"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorResponse"
  createNote:
    handler: src/service.createNote
    events:
      - http:
          method: "post"
          path: "note"
          documentation:
            summary: "Creación de nota"
            description: "Realiza la creación de la nota"
            requestBody:
              description: "Objeto con campos de nota"
            requestModel:
              "application/json": "Note"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Se registra la nota"
                responseModels:
                  "application/json": "SuccessResponse"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorResponse"
  getAllNotes:
    handler: src/service.getAllNotes
    events:
      - http:
          method: "get"
          path: "note"
          documentation:
            summary: "Listar notas"
            description: "Se listan todas las notas"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Se listan las notas"
                responseModels:
                  "application/json": "NoteResponse"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorResponse"
  getNote:
    handler: src/service.getNote
    events:
      - http:
          method: "get"
          path: "note/{id}"
          documentation:
            summary: "Obtener una nota"
            description: "Obtenemos una nota"
            pathParams:
              - name: "id"
                description: "Id de la nota"
                schema:
                  type: "string"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Se obtiene una nota por id"
                responseModels:
                  "application/json": "NoteResponse"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorResponse"
  updateNote:
    handler: src/service.updateNote
    events:
      - http:
          method: put
          path: "note/{id}"
          documentation:
            summary: "Actualizar nota"
            description: "Actualizamos una nota"
            pathParams:
              - name: "id"
                description: "Id de la nota"
                schema:
                  type: "string"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Se actualiza una nota por id"
                responseModels:
                  "application/json": "NoteResponse"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorResponse"
  deleteNote:
    handler: src/service.deleteNote
    events:
      - http:
          method: delete
          path: "note/{id}"
          documentation:
            summary: "Eliminar nota"
            description: "Eliminamos una nota"
            pathParams:
              - name: "id"
                description: "Id de la nota"
                schema:
                  type: "string"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Se elimina una nota por id"
                responseModels:
                  "application/json": "SuccessResponse"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorResponse"
resources:
  Resources:
    Notes:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Notes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
